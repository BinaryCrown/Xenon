import codecs

encoding_map = {
    0x00: 0x2302,
    0x01: 0x263A,
    0x02: 0x263B,
    0x03: 0x2665,
    0x04: 0x2666,
    0x05: 0x2663,
    0x06: 0x2660,
    0x07: 0x2022,
    0x08: 0x25D8,
    0x09: 0x25CB,
    0x0A: 0x25D9,
    0x0B: 0x2642,
    0x0C: 0x2640,
    0x0D: 0x266A,
    0x0E: 0x266B,
    0x0F: 0x263C,
    0x10: 0x25BA,
    0x11: 0x25C4,
    0x12: 0x2195,
    0x13: 0x203C,
    0x14: 0x00B6,
    0x15: 0x00A7,
    0x16: 0x25AC,
    0x17: 0x21A8,
    0x18: 0x2191,
    0x19: 0x2193,
    0x1A: 0x2192,
    0x1B: 0x2190,
    0x1C: 0x221F,
    0x1D: 0x2194,
    0x1E: 0x25B2,
    0x1F: 0x25BC,
    0x20: 0x20A7,
    0x21: 0x0192,
    0x22: 0x2310,
    0x23: 0x2591,
    0x24: 0x2592,
    0x25: 0x2593,
    0x26: 0x2502,
    0x27: 0x2524,
    0x28: 0x2561,
    0x29: 0x2562,
    0x2A: 0x2556,
    0x2B: 0x2555,
    0x2C: 0x2563,
    0x2D: 0x2551,
    0x2E: 0x2557,
    0x2F: 0x255D,
    0x30: 0x255C,
    0x31: 0x255B,
    0x32: 0x2510,
    0x33: 0x2514,
    0x34: 0x2534,
    0x35: 0x252C,
    0x36: 0x251C,
    0x37: 0x2500,
    0x38: 0x253C,
    0x39: 0x255E,
    0x3A: 0x255F,
    0x3B: 0x255A,
    0x3C: 0x2554,
    0x3D: 0x2569,
    0x3E: 0x2566,
    0x3F: 0x2560,
    0x40: 0x2550,
    0x41: 0x256C,
    0x42: 0x2567,
    0xCA: 0x2568,
    0xFF: 0x2564
}

def sscfcmp_encode(x: str) -> bytes: # Decodes a character with CP437
    h = ord(x)
    if h in encoding_map.values():
        res = hex(decoding_map[h])[2:]
        if len(res) < 2:
            res = "0"*(2-len(res)) + res
        res = bytes.fromhex(res)
    else:
        try:
            res = x.encode("cp500")
        except:
            print("Invalid character to encode.")
            res = None
    return res

def sscfcmp_decode(h: int) -> str: # Encodes a byte with a hybrid of CP437 and CP500
    if h < 66 or h == 202 or h == 255:
        res = chr(encoding_map[h])
    else:
        h = hex(h)[2:]
        if len(h) > 2:
            print("Invalid character to decode.")
        elif len(h) < 2:
            h = "0"*(2-len(h))+h
        h = bytes.fromhex(h)
        res = h.decode("cp500")
    return res

def encode(text):
    return b"".join(sscfcmp_encode(x) for x in text), len(text)

def decode(binary):
    return "".join(sscfcmp_decode(x) for x in binary), len(binary)

def sscfcmp_search(name):
    return codecs.CodecInfo(encode, decode, name="sscfcmp")

codecs.register(sscfcmp_search)